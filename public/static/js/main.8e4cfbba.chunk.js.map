{"version":3,"sources":["components/Card/Card.js","components/List/List.js","components/Search/Search.js","utils/constants.js","pages/SearchPage/SearchPage.js","pages/DetailsPage/DetailsPage.js","pages/HomePage/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Card","React","memo","props","movie","history","useHistory","className","style","width","margin","height","overflow","src","Poster","alt","Title","Year","Type","onClick","push","imdbID","List","elements","component","map","e","element","createElement","key","Search","value","type","onChange","target","onSubmit","axiosHeaders","headers","SearchPage","useState","searchTerm","setSearchTerm","searchResult","setSearchResult","uri","axios","get","then","res","data","Array","onSubmitSuccess","catch","err","console","error","DetailsPage","url","useParams","href","Button","incrementCounter","Counter","HomePage","counter","setCounter","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8e4cfbba.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\n/**\n * useState(), useHistory() => Both are react hooks.\n * React hooks help to change state.\n * State change via hooks also informs React that\n * re-rendering is required.\n * React.memo is a special function. It prevents re-rendering\n * unless this component's input has changed.\n * Usually all child components re-rendered.\n * With React.memo() only if this component input has updated\n * then re-rendering will occur.\n */\nconst Card = React.memo(props => {\n  /**\n   * movie = {\n   *  Poster: String,\n   *  Title: String,\n   *  Year: String,\n   *  Type: String,\n   *  imdbID: String\n   * }\n   */\n  const movie = props.movie;\n  const history = useHistory();\n\n  const viewButtonClick = () => {\n    history.push(`/details/${movie.imdbID}`);\n  }\n  \n  return (\n    <div className=\"col-md-4\">\n      <div className=\"card\" style={{ width: '18rem', margin: 'auto' }}>\n        <div className=\"bd-placeholder-img card-img-top\" style={{ width: '18rem', height: '18rem', overflow: 'hidden' }}>\n          <img src={movie.Poster} style={{ width: '18rem' }} alt=\"Poster\" />\n        </div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{movie.Title}</h5>\n          <p className=\"card-text\"> Year : {movie.Year} , Type: {movie.Type} </p>\n          <button className=\"btn btn-primary\" onClick={viewButtonClick}>View</button>\n        </div>\n      </div>\n      <br />\n    </div>\n  )\n})\n\nexport default Card;","import React from 'react';\n\nexport default function List(props) {\n  const elements = props.elements || []; // Array of movies\n  const component = props.component; // Card component\n\n  const createReactElement = (element) => {\n    /**\n     * This is a specific use case where you have to use the compiled version directly\n     * Second argument is input for card component.\n     * A list in react has to have a unique input property of key.\n     */\n    return React.createElement(component, { movie: element, key: element.imdbID })\n  }\n\n  return (\n    <div className=\"row\">\n      {elements.map(e => createReactElement(e))}\n    </div>\n  )\n}","import React from 'react';\nimport './Search.css';\n\nexport default function Search(props) {\n  const value = props.value;\n  const handleChange = (e) => props.onChange(e.target.value);\n  const handleSubmit = () => props.onSubmit(value);\n\n  return (\n    <div className=\"background\">\n      <input className=\"search clear-margin-top\" type=\"text\" value={value} onChange={handleChange} />\n      <button className=\"btn btn-success clear-margin-top\" onClick={handleSubmit}>Search</button>\n    </div>\n  )\n}","\nconst baseUrl = 'http://localhost:3001/';\nconst axiosHeaders = {\n\theaders: {\n\t  'Access-Control-Allow-Origin': '*',\n\t}\n};\nexport { baseUrl, axiosHeaders }","import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport Card from '../../components/Card/Card';\nimport List from '../../components/List/List';\nimport Search from '../../components/Search/Search';\n\nimport { baseUrl, axiosHeaders } from '../../utils/constants';\n\nexport default function SearchPage() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResult, setSearchResult] = useState([]);\n\n  const onSubmitSuccess = (res) => {\n    // Data validation before setting searchResult\n    if (res && res.data && res.data.Search instanceof Array) {\n      setSearchResult(res.data.Search);\n    }\n  }\n\n\n  const onSubmit = (searchTerm) => {\n    const uri = `${baseUrl}omdb/search?title=${searchTerm}`;\n\n    axios.get(uri, axiosHeaders)\n      .then(res => onSubmitSuccess(res))\n      .catch(err => console.error(err));\n  }\n\n  return (\n    <>\n      <Search value={searchTerm} onChange={setSearchTerm} onSubmit={onSubmit} />\n      <br />\n      <List elements={searchResult} component={Card} />\n    </>\n  )\n}","import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport Card from '../../components/Card/Card';\r\nimport List from '../../components/List/List';\r\n\r\nimport { baseUrl, axiosHeaders } from '../../utils/constants';\r\n\r\nexport default function DetailsPage() {\r\n    //const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const params = useParams();\r\n    const imdbID = params.imdbID;\r\n    /**\r\n     * Call server with imdbID\r\n     * URL Format : http://localhost:3001/omdb/imdb/tt0944947\r\n     * const imdbID = params.imdbID;\r\n     */\r\n    const onSubmitSuccess = (res) => {\r\n        // Data validation before setting searchResult\r\n        if (res && res.data && res.data.Search instanceof Array) {\r\n          setSearchResult(res.data.Search);\r\n        }\r\n      }\r\n    \r\n    var url;\r\n\r\n    const onSubmit = (imdbID) => {\r\n    const uri = `http://localhost:3001/omdb/imdb/${imdbID}`;\r\n\r\n    url = uri;\r\n\r\n    axios.get(uri, axiosHeaders)\r\n        .then(res => onSubmitSuccess(res))\r\n        .catch(err => console.error(err));\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {/* <Search value={searchTerm} onChange={setSearchTerm} onSubmit={onSubmit} />\r\n        <br /> */}\r\n        <List elements={searchResult} component={Card} />\r\n\r\n        <h3> Wubba Lubba Dub Dub </h3>\r\n        <p> But this is the iMDb ID if it helps : {imdbID}</p>\r\n\r\n        <p> I want to fetch info from here: {url} </p>\r\n\r\n        {<a href={url}> Click Me </a>}\r\n      </div>\r\n    )\r\n}","import React, { useState } from 'react';\n\nfunction Button(props) {\n    return <button onClick={props.incrementCounter}> Click me! </button>\n}\n\nfunction Counter(props) {\n    return <p> Count = {props.value} </p>\n}\n\nexport default function HomePage() {\n    // useState -> A function provided by react\n    // Input to useState -> Initial value of counter\n    // Returns an array of 2 items\n    // 1st is counter\n    // 2nd is function to set value of counter\n    // Long syntax\n    // const returnArr = useState(0);\n    // const counter = returnArr[0];\n    // const setCounter = returnArr[1];\n    const [counter, setCounter] = useState(0);\n    const incrementCounter = () => { setCounter(counter + 1); }\n    return (\n        <>\n            <p> Hello World </p>\n            <Button incrementCounter={incrementCounter} />\n            <Counter value={counter} />\n        </>\n    )\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport SearchPage from './pages/SearchPage/SearchPage';\nimport DetailsPage from './pages/DetailsPage/DetailsPage';\nimport HomePage from './pages/HomePage/HomePage';\n\n/**\n * The Router maps a url to a component\n */\nfunction App() {\n  return (\n    <div className=\"container-fluid remove-padding\">\n      <Router>\n        <Switch>\n          <Route path=\"/search\" component={SearchPage} />\n          <Route path=\"/details/:imdbID\" component={DetailsPage} />\n          <Route path=\"/\" component={HomePage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}